openapi: '3.0.3'
info:
  title: six-cities-backend-api
  version: 1.0.0

paths:
  /offers:
    post:
      summary: "Creation new offer"
      tags:
        - offers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOfferRequest"
      responses:
        '201':
          description: offer was created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  offerId:
                    type: string
    get:
      summary: "Get offers list"
      tags:
        - offers
      responses:
        '200':
          description: The list of offers was successfully received
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Total number of offers
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Offer"

  /offers/{offerId}:
    get:
      summary: Get info about offer
      tags:
        - offers
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: info was received successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        '404':
          description: Offer not found
    put:
      summary: edit offer
      tags:
        - offers
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOfferRequest'
      responses:
        '200':
          description: Offer was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'

    delete:
      summary: offer removing
      tags:
        - offers
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: offer was successfully removed

  /offers/{offerId}/comments:
    get:
      summary: Get list of comments for offer
      tags:
        - comments
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of comments was successfully received
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Total number of comments
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '404':
          description: Offer not found

    post:
      summary: Add comments for offer
      tags:
        - comments
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Комментарий успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /users:
    post:
      summary: Create new user
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User was created successfully
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/User'

  /users/login:
    post:
      summary: Login user
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Success login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid login or password

  /users/logout:
    post:
      summary: Logout user
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logout success

  /users/status:
    get:
      summary: Check user status
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: user status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatus'

  /offers/premium:
    get:
      summary: List premium offers for city
      tags:
        - offers
      parameters:
        - name: city
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: premium offers was successfully received
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Offer"

  /favorites:
    get:
      summary: List favourite offers
      tags:
        - favourites
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List favourite offers was successfully received
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Offer"

  /favorites/{offerId}:
    post:
      summary: Add offer to favourites
      tags:
        - favourites
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Offer was successfully added to favourites
        '404':
          description:  Offer not found

    delete:
      summary: removing offer from favourites
      tags:
        - favourites
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Offer removed from favourites
        '404':
          description: Offer not found

components:
  schemas:
    CreateOfferRequest:
      type: object
      required:
        - title
        - description
        - city
        - previewImage
        - images
        - isPremium
        - rating
        - type
        - roomCount
        - maxGuests
        - price
        - conveniences
        - author
        - coordinates
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1024
        city:
          type: string
        previewImage:
          type: string
        images:
          type: array
          items:
            type: string
          minItems: 6
          maxItems: 6
        isPremium:
          type: boolean
        type:
          type: string
          enum: [apartment, house, room, hotel]
        roomCount:
          type: integer
          minimum: 1
          maximum: 8
        maxGuests:
          type: integer
          minimum: 1
          maximum: 10
        price:
          type: integer
          minimum: 100
          maximum: 100000
        conveniences:
          type: array
          items:
            type: string
        location:
          $ref: "#/components/schemas/Location"
        author:
          $ref: '#/components/schemas/User'

    UpdateOfferRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1024
        city:
          type: string
        previewImage:
          type: string
        images:
          type: array
          items:
            type: string
          minItems: 6
          maxItems: 6
        isPremium:
          type: boolean
        type:
          type: string
          enum: [apartment, house, room, hotel]
        roomCount:
          type: integer
          minimum: 1
          maximum: 8
        maxGuests:
          type: integer
          minimum: 1
          maximum: 10
        price:
          type: integer
          minimum: 100
          maximum: 100000
        conveniences:
          type: array
          items:
            type: string
        location:
          $ref: "#/components/schemas/Location"

    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 15
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 12
        avatarUrl:
          type: string
        isPro:
          type: boolean

    CreateCommentRequest:
      type: object
      required:
        - comment
        - rating
      properties:
        comment:
          type: string
          minLength: 5
          maxLength: 1024
        rating:
          type: integer
          minimum: 1
          maximum: 5

    UserStatus:
      type: object
      properties:
        authenicated:
          type: boolean
        user:
          $ref: '#/components/schemas/User'

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    Comment:
      type: object
      properties:
        id:
          type: string
        comment:
          type: string
        date:
          type: string
          format: date-time
        rating:
          type: integer
          minimum: 1
          maximum: 5
        user:
          $ref: '#/components/schemas/User'

    Location:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
        longitude:
          type: number

    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        avatar:
          type: string
        userType:
          type: string
          enum: [Standart, Pro]

    Offer:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        city:
          type: string
        previewImage:
          type: string
        images:
          type: array
          items:
            type: string
        isPremium:
          type: boolean
        type:
          type: string
        rating:
          type: number
        roomCount:
          type: integer
        maxGuests:
          type: integer
        price:
          type: integer
        conveniences:
          type: array
          items:
            type: string
        location:
          $ref: '#/components/schemas/Location'
        isFavorite:
          type: boolean
        author:
          $ref: '#/components/schemas/User'
